{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/","title":"API Reference","text":"<p>This module contains the RunTool class which is used to run any tool  with the given arguments class RunTool:     Attributes:         tool (str): tool name         script (str): script name         args (list strings): list of arguments     Methods:         get_opts(self): get the options of the tool         run(self): run formal verification tool on the given script</p>"},{"location":"reference/#afgi.run_tools.run.RunTool","title":"<code>RunTool</code>","text":"<p>RunTool class Attributes:     tool (str): tool name     script (str): script name     args (list strings): list of arguments</p> Source code in <code>src/afgi/run_tools/run.py</code> <pre><code>class RunTool:\n    \"\"\" RunTool class\n    Attributes:\n        tool (str): tool name\n        script (str): script name\n        args (list strings): list of arguments\n    \"\"\"\n    def __init__(self, tool, script, args):\n        self.tool = tool\n        self.script = script\n        self.args = args\n\n    def get_opts(self):\n       \"\"\"A method to get the options of the tool\n        Args:\n              None\n        Returns: \n            opts (str): tool options with prefix '-' if not present separated by space  \n       \"\"\"\n       opts = \"\"\n       for arg in self.args:\n            if arg.startswith('-'):\n                opts = opts + ' ' + arg\n            else:\n                opts = opts + ' ' +'-' + arg\n       return opts\n\n    # Run formal verification tool on the given script\n    def run(self):\n        \"\"\" A method to run a tool on the given script with the given arguments\n        Args:\n            None\n        Returns:\n            output (str): output of the tool to the console\n        \"\"\"\n\n        # run tool\n        return os.system(self.tool + ' ' + self.get_opts() + ' ' + self.script)\n</code></pre>"},{"location":"reference/#afgi.run_tools.run.RunTool.get_opts","title":"<code>get_opts()</code>","text":"<p>A method to get the options of the tool Args:       None Returns:      opts (str): tool options with prefix '-' if not present separated by space</p> Source code in <code>src/afgi/run_tools/run.py</code> <pre><code>def get_opts(self):\n   \"\"\"A method to get the options of the tool\n    Args:\n          None\n    Returns: \n        opts (str): tool options with prefix '-' if not present separated by space  \n   \"\"\"\n   opts = \"\"\n   for arg in self.args:\n        if arg.startswith('-'):\n            opts = opts + ' ' + arg\n        else:\n            opts = opts + ' ' +'-' + arg\n   return opts\n</code></pre>"},{"location":"reference/#afgi.run_tools.run.RunTool.run","title":"<code>run()</code>","text":"<p>A method to run a tool on the given script with the given arguments Args:     None Returns:     output (str): output of the tool to the console</p> Source code in <code>src/afgi/run_tools/run.py</code> <pre><code>def run(self):\n    \"\"\" A method to run a tool on the given script with the given arguments\n    Args:\n        None\n    Returns:\n        output (str): output of the tool to the console\n    \"\"\"\n\n    # run tool\n    return os.system(self.tool + ' ' + self.get_opts() + ' ' + self.script)\n</code></pre>"}]}